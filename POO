<?php

Classe

	Classe é um tipo de dado definido pelo usuario, que tem um estado (sua representação) e algumas operações (seu comportamento). Uma classe possui alguns dados
	internos e alguns metodos, na forma de "funções" e normalmente descreve caracteristicas genericas de varios objetos semelhantes
	É como um modelo (prototipo) que define as variaveis (estado) e os metodos (comportamento) comuns a todos os objetos do mesmo tipo
	
Objeto

	Um objeto é uma instancia de uma classe ou uma variavel do tipo de dados definido pela classe. Os objetos são entidades reais. 
	Quando o programa é executado, os objetos ocupam memoria para usa representação interna. O relacionamento entre classe e objeto é o mesmo que existe entre variavel e tipo
	
Atributo

	São as caracteristicas que definem o objeto, ou seja, representam a constituição do objeto e definem a estrutura do mesmo. Os atributos podem armazenar valores como outros objetos
	
Metodos

	O metodo define o comportamento de um objeto - tudo o que acontece quando o objeto é criado e as diversas tarefas que realziar durante sua existecia , ou seja, são as ações que o objeto pode realizar
	para modificar a sí próprio ou para algum efeito externo
	
Construtor 

	Construtor é um método especial utilizado para definir o comportamento inicial de um objeto, ou seja, o comportamento no momento de sua criação. O método construtor é executado automaticamente
	no momento em que instanciamos um objeto por meio do operador new
	Caso não seja definica um metodo construtor, automaticamente todas as propriedados do objeto criado são inicializadas com o valor NULL
	Para definir um método construtor em uma determinada classe basta declarar o metodo __construct()
	
Destrutor

	Destrutor ou finalziador é um método especial executado automaticamente quando o objeto é desalocado da memória, quando atribuímos o valor NULL ao objeto, quando utilizamos a função unset() sobre o mesmo
	ou em ultima instancia, quando o programa é finalizado
	
	O método destrutor pode ser utilizado para finalizar conexões, apagar arquivos temporarios criados durante o ciclo de vida do objeto, dentre outras circunstâncias.
	
	Para definir um método destrutor em uma determinada classe basta declarar o método __destruct()

Herança

	é uma forma de reutilização de código em que novas classes são criadas a partir de classes existemntes, absovendo seus atributos e comportamentos, complementando-os com novas necessidades
	
	As classes com nivel hierarquico superior, podem ser intituladas com classe-base, classe-mae, classe-pai, superclasses ou ainda outra atribuição que se refira á sua superioridade. 
	Já as classes herdeiras, assim podem ser chamadas, mas também, classe-filha, subclasse ou classe derivada
	
	
Polimorfismo

	É o princípio que permite que classes derivadas de uma mesma superclasse tenham métodos iguais (com as mesma nomenclatura e parâmetros), mas comportamentos diferente, redefinidos em cada
	uma das classes-filhas, Algumas caracteristicas do polimorfismo são:
	
	Facilita a reutilização de código. Para que um objeto utilize alguma funcionalidade de outro ele só precisa conhecer a assinatura de um método, por exemplo, e não usa implementação.
	
	Facilita a manutenção, visto que não é preciso utilizar varias estruturas condicionais para simular alguma situação diferente.

Abstrair
	é separar mentalmente, considerar isoladamente, simplificar, alhear-se.
	Para construir um sistema orientado a objeto, não devemos projetar o sistema como sendo uma grande peça monolítica; devemos separa-lo em partes, podermos construir peças bem definidas que
	possam ser reaproveitadas mais tarde, formando uma estrutura hierárquica
	
Metodos magicos

__set()

	Intercepta a atribuição de valores a propriedades do objeto. Sempre que for atribuído um valor a uma propriedade do objeto, automaticamente está atribuição passa pelo método __set(), o qual recebe o nome da propriedade
	e o valor a ser atribuído, podendo atribui-lo ou nao.

__get()
	
	Intercepta requisições de propriedades do objeto. Sempre que for requisitada uma propriedade, automaticamente essa requisição passará pelo método __get(), o qual recebe o nome
	da propriedade requisitada, podendo retorna-la ou não
	
__call()

	Intercepta a chamada a métodos. Sempre que for executado um método que não existir no objeto, automaticamente a execução sera direcionada para ele, que recebe dois parametros
	, o nome requisitado e o parametro recebido, podendo decidir o procedimento a realizar 




?>